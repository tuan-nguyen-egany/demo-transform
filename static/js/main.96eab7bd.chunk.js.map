{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","accessSource","setAccessSource","accessDest","setAccessDest","transformErr","Container","as","Col","md","sm","Form","className","Group","Label","htmlFor","Control","type","id","onChange","e","target","value","Button","variant","onClick","preventDefault","axios","method","url","headers","then","response","alert","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAqEeA,MA/Df,WAAgB,IAAD,EAC2BC,qBAD3B,mBACNC,EADM,KACQC,EADR,OAEuBF,qBAFvB,mBAENG,EAFM,KAEMC,EAFN,OAG2BJ,qBAH3B,mBAGNK,EAHM,KAuBb,OAvBa,KAwBX,kBAACC,EAAA,EAAD,CAAWC,GAAIC,IAAKC,GAAG,IAAIC,GAAG,MAC5B,kBAACC,EAAA,EAAD,CAAMC,UAAU,sCACd,wBAAIA,UAAU,UAAd,2BAEA,kBAACD,EAAA,EAAKE,MAAN,CAAYD,UAAU,eACpB,kBAACD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,cAApB,iCACA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,GAAG,aACHC,SAAU,SAAAC,GAAC,OAAIlB,EAAgBkB,EAAEC,OAAOC,WAI5C,kBAACX,EAAA,EAAKE,MAAN,CAAYD,UAAU,eACpB,kBAACD,EAAA,EAAKG,MAAN,CAAYC,QAAQ,YAApB,sCAGA,kBAACJ,EAAA,EAAKK,QAAN,CACEC,KAAK,OACLC,GAAG,WACHC,SAAU,SAAAC,GAAC,OAAIhB,EAAcgB,EAAEC,OAAOC,WAI1C,kBAACX,EAAA,EAAKE,MAAN,KACE,kBAACU,EAAA,EAAD,CACEC,QAAQ,UACRP,KAAK,SACLQ,QA/CU,SAAAL,GAClBA,EAAEM,iBACFC,IAAM,CACJC,OAAQ,OACRC,IAAK,iEACLC,QAAS,CACP,0BAA2B7B,EAC3B,wBAAyBE,EACzB,eAAgB,uCAEjB4B,MAAK,SAAAC,GACNC,MAAM,yBACLC,OAAM,SAAAC,GACPF,MAAM,2BA+BF,kBAOA,6BAAM5B,EAAe,6BAAMA,GAAsB,UClDvC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,kB","file":"static/js/main.96eab7bd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, Button, Container, Col } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [accessSource, setAccessSource] = useState();\n  const [accessDest, setAccessDest] = useState();\n  const [transformErr, setTransformErr] = useState();\n\n  const handleClick = e => {\n    e.preventDefault();\n    axios({\n      method: \"POST\",\n      url: \"https://59de8bec.ngrok.io/api/v1/transforms/haravan-to-haravan\",\n      headers: {\n        \"access-token-hrv-source\": accessSource,\n        \"access-token-hrv-dest\": accessDest,\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    }).then(response => {\n      alert(\"Start transform...\")\n    }).catch(error => {\n      alert(\"Wrong access token\")\n    })\n\n  };\n\n  return (\n    <Container as={Col} md=\"5\" sm=\"12\">\n      <Form className=\"shadow-lg bg-white rounded p-4 m-4\">\n        <h3 className=\"center\">TRANSFORM DATA ECONOMIC</h3>\n\n        <Form.Group className=\"input-field\">\n          <Form.Label htmlFor=\"hrv-source\">Nhập access token source</Form.Label>\n          <Form.Control\n            type=\"text\"\n            id=\"hrv-source\"\n            onChange={e => setAccessSource(e.target.value)}\n          />\n        </Form.Group>\n\n        <Form.Group className=\"input-field\">\n          <Form.Label htmlFor=\"hrv-dest\">\n            Nhập access token destination\n          </Form.Label>\n          <Form.Control\n            type=\"text\"\n            id=\"hrv-dest\"\n            onChange={e => setAccessDest(e.target.value)}\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Button\n            variant=\"primary\"\n            type=\"button\"\n            onClick={handleClick}\n          >\n            TRANSFORM NOW!\n          </Button>\n          <div>{transformErr ? <div>{transformErr}</div> : null}</div>\n        </Form.Group>\n      </Form>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}